String.IsNullorEmpty(string file)=проверка на наличие букв в строке

1. В чем разница между значением и ссылочными типами? Верно ли, что тип значения всегда хранится в стеке? 
----разница в том,что ссылочные типы хранятя в куче и передают значение в адресс переменной,значимые в стеке и передают копию переменной,значимые типы не могут быть null. тип-значение входит как поле в другой тип (неважно, ссылочный или нет). Тогда он хранится вместе с объемлющим объектом.
б) тип-значение подвергся операции упаковки (boxing) 
3. В чем разница между классами и структурами? Можно ли наследовать от структуры? В каких случаях лучше использовать конструкции? 
---что класс – является ссылочным типом, а структуры – значимый класс,не могут быть null,если имеется конструктор ,то только с параметрами и все поля нужно проинициализировать.
4. Какова цель пространства имен? Это хорошая практика, чтобы держать ваше приложение в одном пространстве имен? 
---пространство имен,это контейнер ,который содержит в себе определнные классы
8. Можете ли вы описать, почему   оператор lock () предназначен для приема только параметров ссылочного типа? 
---ссылочные типы имеют имеют возможность использовать Sync Block - структуру, которая создается при для объекта при его блокировке.
9. Как аргументы метода передаются в C #? Можно ли изменить это поведение? 
---есть входные и выходные параметры ref  и out
10. В чем разница между  Int.Parse  и  Int.TryParse ? 
---разница в том что если мы напишим Парсе и там будет не целочисленный тип то будет исключение,а Трай Парс выбьет значение False и пройдет дальше
11. Каковы неявные и явные преобразования типов? 
---приведения типо,если мы можем преобразовать лонг в инт,дабл в флоат,шорт в байт,то наоборот нельзя,нужно приведения типов писать перед значением или переменной
12. Как вы преобразуете из одного ссылочного типа в другой, не рискуя бросить исключение? 
---при помощи апкаст и доункаст
13. Почему невозможно создать экземпляр абстрактного класса? 
---невозможно создать так как это базовый класс и мы его может только насследовать
14. Можно ли вызвать метод из абстрактного класса? 
---да,можно ,приведением типов и полиморфизм
15. Правда ли, что интерфейс может содержать только объявления методов? 
---У интерфейса методы и свойства не имеют реализации, в этом они сближаются с абстрактными методами абстрактных классов
16. Можно ли указать модификаторы доступа внутри интерфейса?
---нет,нельзя,так как мы должны реализовать интерфейс и они идут по умолчанию public
17. Можете ли вы наследовать от двух интерфейсов с одинаковым именем метода в обоих из них? 
---да,можно ,будет выполнятся один и тот же метод,но это может быть некоректно,лучше указать перед методом название интерфейса
18. Можно ли определить два метода с одинаковыми именами и аргументами, но с разными типами возвращаемых данных? 
---нельзя,только если у нас будут разныее аргументы
19. В чем разница между переопределением метода и перегрузкой? 
Пеереопределение относится к виртуальным и абстрактным членам,а перезагрузка это методы имеют разную сигнатуру, в которой совпадает только название метода
20. Что означает   модификатор защищенного внутреннего доступа? 
---protected означает, что вы можете получить доступ к члену из любого подтипа (и, конечно, из самого типа объявления).
21. У вашего класса Shape есть один конструктор с параметрами. Можете ли вы создать экземпляры этого класса, вызывая new  Shape () ? 
---нужно указать параметры в экземпляр этого класса
22. Можно ли переопределить метод, который объявлен без виртуального ключевого слова? 									
---при помощи сокрытия ,ключевого слова new
23. В чем разница между новыми и переопределить ключевые слова в объявлении метода? 
---овверрайд переопределяет во всех классах ,в том числе и базовом,а new нет,только там где вызван
24. Можно ли явно вызвать класс " статический конструктор?
---вызвать нельзя,он вызывается автоматически при первом обращении
25. Как вы можете переопределить статический конструктор? 
конструктор по умолчанию переопределить нельзя
26. Можете ли вы использовать  это  ключевое слово внутри статического метода? 
---нет.Потому что this указываетна экземпляр класса, в статическом методе нет экземпляра.
27. В чем разница между использованием статического класса и шаблона Singleton? 
---то статический класс ,а сингилтон делаем ссылку на самого себя,всего один экземпляр,сингилтон можно наследоватся и реализовывать интерфейсы.статич класс нельзя,одна точка доступа у сингилтон instance,сериализация,возможность передачи в качестве параметров
28. Что значит  неизменное  ? Можете ли вы привести примеры? 
--- это типы, которые после инициализации не могут изменить свое внутреннее состояние
29. Как вы можете создавать делегатов в C #? 
---для создания делегата использывается ключевое слово делегат,создаем переменную и присваиваем нужный метод с той же сигнатурой и вызываем его
30. Являются ли делегаты значения или ссылочного типа? 
---делегаты являются ссылочными типами
31. В чем разница между событиями и многоадресными делегатами? 
---Делегат - это безопасный от типа указатель на функцию. Событие - это реализация шаблона проектирования издатель-подписчик с использованием делегата.
32. Есть ли разница между методом и функцией? 
метод это не возвращаемый тип,функция возвращаемый
33. Что такое лямбда-выражения? Для чего они используются? 
---Лямбда-выражения представляют упрощенную запись анонимных методов.параметр преобразуется в параметр делегата,типы параметров должны быть одинаковыми,количество параметров,возвращаемое значение лямбда-выражений должно быть тем же
34. Возможно ли получить доступ к переменным вне лямбда-выражения? 
---
35. Для чего   используется LINQ ?
---LINQ представляет простой и удобный язык запросов к источнику данных.У вас есть коллекция некоторых элементов данных и вам нужно ее как то отсортировать или что то поменять в ней
36. Что обычно следует делать внутри оператора catch? 
---отлавливать исключение
38. Что такое отражение? Где это можно использовать? 
Механизм отражения позволяет получать объекты (типа Type), которые описывают сборки, модули и типы.используются для проверки экземпляров типов в сборке,При необходимости доступа к атрибутам в метаданных программы,Для создания типов во время выполнения.
39. Что такое дженерики? 
---Дженерики это обобщенныйй тип,на момент написания класса мы можем незнать какой у нас будет тип,строки или цыфры,для этого и используются дженерики
40. Какие ограничения могут быть применены к  генерикам ?
 ---ограничения задаются ключевым словом where что нужно явно указать какой должен быть тип
41. Можно ли принудительно собирать мусор вручную? 
System.GC существует класс который собирает мусор ненужных ресурсов,у него есть методы которые собирают мусор
42. Каковы поколения сборщика мусора .NET? 
---К поколению 0 относятся новые объекты, которые еще ни разу не подвергались сборке мусора. К поколению 1 относятся объекты, которые пережили одну сборку, а к поколению 2 - объекты, прошедшие более одной сборки мусора.
43. Какая логика обычно используется в интерфейсе IDisposable внутри метода Dispose? 
---Основное использование этого интерфейса - освобождение неуправляемых ресурсов.
44. Можете ли вы расширить базовый класс .NET Framework своим собственным методом?
---насколько я знаю что есть спец классы,констукторы,где можно расширять
